apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "rancher-ai-assistant.fullname" . }}-toolbox-config
data:
  tools.yaml: |
    sources:
    rancher-api:
        kind: http
        baseUrl: https://rancher.cattle-system.svc.cluster.local:443/
        headers:
          Authorization: Bearer token-kkd46:bf5f6pnzbd4l67ndgx7rlzds8rq9bzgj7dxj9h7shmxk4qdb5xgrm2
          # Authorization: Bearer token-z7n4g:hxfwbbcvxxkcxgrjqk8f8w67q8sth96kncg6bg8x5mlb8pqrklclkt
          Content-Type: application/json
        disableSslVerification: true
    rancher-docs:
        kind: http
        baseUrl: https://ranchermanager.docs.rancher.com/
    tools:
        clusterRoleTemplateBindings:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/clusterroletemplatebindings
          description: List objects of kind ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
        clusterRoleTemplateBindingDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/clusterroletemplatebindings/{name}
          description: Get details of a specific ClusterRoleTemplateBinding by name
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the ClusterRoleTemplateBinding
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        globalRoleBindings:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings
          description: List objects of kind GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        createGlobalRoleBinding:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/globalrolebindings
          description: Create a GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
          requestBody:
            description: GlobalRoleBinding object to create
            type: "io.cattle.management.v3.GlobalRoleBinding"
        deleteCollectionGlobalRoleBinding:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/globalrolebindings
          description: Delete collection of GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        globalRoleBindingByName:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Read the specified GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceGlobalRoleBinding:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Replace the specified GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: GlobalRoleBinding object to replace
            type: "io.cattle.management.v3.GlobalRoleBinding"
        deleteGlobalRoleBinding:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Delete a GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: gracePeriodSeconds
              description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
              type: integer
            - name: ignoreStoreReadErrorWithClusterBreakingPotential
              description: "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
              type: boolean
            - name: orphanDependents
              description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
              type: boolean
            - name: propagationPolicy
              description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: DeleteOptions object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        patchGlobalRoleBinding:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Partially update the specified GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        globalRoleBindingStatus:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}/status
          description: Read status of the specified GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceGlobalRoleBindingStatus:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}/status
          description: Replace status of the specified GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: GlobalRoleBinding object to replace status
            type: "io.cattle.management.v3.GlobalRoleBinding"
        patchGlobalRoleBindingStatus:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}/status
          description: Partially update status of the specified GlobalRoleBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRoleBinding
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        globalRoles:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalroles
          description: List objects of kind GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        createGlobalRole:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/globalroles
          description: Create a GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
          requestBody:
            description: GlobalRole object to create
            type: "io.cattle.management.v3.GlobalRole"
        deleteCollectionGlobalRole:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/globalroles
          description: Delete collection of GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        globalRoleDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalroles/{name}
          description: Read the specified GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceGlobalRole:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/globalroles/{name}
          description: Replace the specified GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: GlobalRole object to replace
            type: "io.cattle.management.v3.GlobalRole"
        deleteGlobalRole:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/globalroles/{name}
          description: Delete a GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: gracePeriodSeconds
              description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
              type: integer
            - name: ignoreStoreReadErrorWithClusterBreakingPotential
              description: "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
              type: boolean
            - name: orphanDependents
              description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
              type: boolean
            - name: propagationPolicy
              description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: DeleteOptions object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        patchGlobalRole:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/globalroles/{name}
          description: Partially update the specified GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        globalRoleStatus:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalroles/{name}/status
          description: Read status of the specified GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceGlobalRoleStatus:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/globalroles/{name}/status
          description: Replace status of the specified GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: GlobalRole object to replace status
            type: "io.cattle.management.v3.GlobalRole"
        patchGlobalRoleStatus:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/globalroles/{name}/status
          description: Partially update status of the specified GlobalRole
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the GlobalRole
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        namespacedClusterRoleTemplateBindings:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings
          description: List objects of kind ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        createNamespacedClusterRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings
          description: Create a ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
          requestBody:
            description: ClusterRoleTemplateBinding object to create
            type: "io.cattle.management.v3.ClusterRoleTemplateBinding"
        deleteCollectionNamespacedClusterRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings
          description: Delete collection of ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        namespacedClusterRoleTemplateBindingDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}
          description: Read the specified ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceNamespacedClusterRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}
          description: Replace the specified ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: ClusterRoleTemplateBinding object to replace
            type: "io.cattle.management.v3.ClusterRoleTemplateBinding"
        deleteNamespacedClusterRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}
          description: Delete a ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: gracePeriodSeconds
              description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
              type: integer
            - name: ignoreStoreReadErrorWithClusterBreakingPotential
              description: "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
              type: boolean
            - name: orphanDependents
              description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
              type: boolean
            - name: propagationPolicy
              description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: DeleteOptions object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        patchNamespacedClusterRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}
          description: Partially update the specified ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        namespacedClusterRoleTemplateBindingStatus:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}/status
          description: Read status of the specified ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceNamespacedClusterRoleTemplateBindingStatus:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}/status
          description: Replace status of the specified ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: ClusterRoleTemplateBinding object to replace status
            type: "io.cattle.management.v3.ClusterRoleTemplateBinding"
        patchNamespacedClusterRoleTemplateBindingStatus:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/clusterroletemplatebindings/{name}/status
          description: Partially update status of the specified ClusterRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ClusterRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        namespacedProjectRoleTemplateBindings:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings
          description: List objects of kind ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        createNamespacedProjectRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings
          description: Create a ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
          requestBody:
            description: ProjectRoleTemplateBinding object to create
            type: "io.cattle.management.v3.ProjectRoleTemplateBinding"
        deleteCollectionNamespacedProjectRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings
          description: Delete collection of ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        namespacedProjectRoleTemplateBindingDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}
          description: Read the specified ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceNamespacedProjectRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}
          description: Replace the specified ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: ProjectRoleTemplateBinding object to replace
            type: "io.cattle.management.v3.ProjectRoleTemplateBinding"
        deleteNamespacedProjectRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}
          description: Delete a ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: gracePeriodSeconds
              description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
              type: integer
            - name: ignoreStoreReadErrorWithClusterBreakingPotential
              description: "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
              type: boolean
            - name: orphanDependents
              description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
              type: boolean
            - name: propagationPolicy
              description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: DeleteOptions object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        patchNamespacedProjectRoleTemplateBinding:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}
          description: Partially update the specified ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        namespacedProjectRoleTemplateBindingStatus:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}/status
          description: Read status of the specified ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceNamespacedProjectRoleTemplateBindingStatus:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}/status
          description: Replace status of the specified ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: ProjectRoleTemplateBinding object to replace status
            type: "io.cattle.management.v3.ProjectRoleTemplateBinding"
        patchNamespacedProjectRoleTemplateBindingStatus:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projectroletemplatebindings/{name}/status
          description: Partially update status of the specified ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the ProjectRoleTemplateBinding
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        namespacedProjects:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects
          description: List objects of kind Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        createNamespacedProject:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects
          description: Create a Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
          requestBody:
            description: Project object to create
            type: "io.cattle.management.v3.Project"
        deleteCollectionNamespacedProject:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects
          description: Delete collection of Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        namespacedProjectDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects/{name}
          description: Read the specified Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the Project
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceNamespacedProject:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects/{name}
          description: Replace the specified Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the Project
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Project object to replace
            type: "io.cattle.management.v3.Project"
        deleteNamespacedProject:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects/{name}
          description: Delete a Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the Project
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: gracePeriodSeconds
              description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
              type: integer
            - name: ignoreStoreReadErrorWithClusterBreakingPotential
              description: "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
              type: boolean
            - name: orphanDependents
              description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
              type: boolean
            - name: propagationPolicy
              description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: DeleteOptions object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        patchNamespacedProject:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/namespaces/{namespace}/projects/{name}
          description: Partially update the specified Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the Project
              type: string
            - name: namespace
              description: object name and auth scope, such as for teams and projects
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        projectRoleTemplateBindings:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/projectroletemplatebindings
          description: List objects of kind ProjectRoleTemplateBinding
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
        projects:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/projects
          description: List objects of kind Project
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
        roleTemplates:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/roletemplates
          description: List objects of kind RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        createRoleTemplate:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/roletemplates
          description: Create a RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
          requestBody:
            description: RoleTemplate object to create
            type: "io.cattle.management.v3.RoleTemplate"
        deleteCollectionRoleTemplate:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/roletemplates
          description: Delete collection of RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored."
              type: boolean
            - name: continue
              description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications."
              type: string
            - name: fieldSelector
              description: "A selector to restrict the list of returned objects by their fields. Defaults to everything."
              type: string
            - name: labelSelector
              description: "A selector to restrict the list of returned objects by their labels. Defaults to everything."
              type: string
            - name: limit
              description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned."
              type: integer
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: resourceVersionMatch
              description: "resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: sendInitialEvents
              description: "`sendInitialEvents=true` may be set together with `watch=true`. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \"Bookmark\" event\u00a0 will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with `\"k8s.io/initial-events-end\": \"true\"` annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.\n\nWhen `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set. The semantic of the watch request is as following:\n- `resourceVersionMatch` = NotOlderThan\n\u00a0 is interpreted as \"data at least as new as the provided `resourceVersion`\"\n\u00a0 and the bookmark event is send when the state is synced\n\u00a0 to a `resourceVersion` at least as fresh as the one provided by the ListOptions.\n\u00a0 If `resourceVersion` is unset, this is interpreted as \"consistent read\" and the\n\u00a0 bookmark event is send when the state is synced at least to the moment\n\u00a0 when request started being processed.\n- `resourceVersionMatch` set to any other value or unset\n\u00a0 Invalid error is returned.\n\nDefaults to true if `resourceVersion=\"\"` or `resourceVersion=\"0\"` (for backward compatibility reasons) and to false otherwise."
              type: boolean
            - name: timeoutSeconds
              description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity."
              type: integer
            - name: watch
              description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        roleTemplateDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/roletemplates/{name}
          description: Read the specified RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceRoleTemplate:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/roletemplates/{name}
          description: Replace the specified RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: RoleTemplate object to replace
            type: "io.cattle.management.v3.RoleTemplate"
        deleteRoleTemplate:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/roletemplates/{name}
          description: Delete a RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: gracePeriodSeconds
              description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
              type: integer
            - name: ignoreStoreReadErrorWithClusterBreakingPotential
              description: "if set to true, it will trigger an unsafe deletion of the resource in case the normal deletion flow fails with a corrupt object error. A resource is considered corrupt if it can not be retrieved from the underlying storage successfully because of a) its data can not be transformed e.g. decryption failure, or b) it fails to decode into an object. NOTE: unsafe deletion ignores finalizer constraints, skips precondition checks, and removes the object from the storage. WARNING: This may potentially break the cluster if the workload associated with the resource being unsafe-deleted relies on normal deletion flow. Use only if you REALLY know what you are doing. The default value is false, and the user must opt in to enable it"
              type: boolean
            - name: orphanDependents
              description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both."
              type: boolean
            - name: propagationPolicy
              description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: DeleteOptions object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
        patchRoleTemplate:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/roletemplates/{name}
          description: Partially update the specified RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        roleTemplateStatus:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/roletemplates/{name}/status
          description: Read status of the specified RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: resourceVersion
              description: "resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.\n\nDefaults to unset"
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
        replaceRoleTemplateStatus:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/roletemplates/{name}/status
          description: Replace status of the specified RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: RoleTemplate object to replace status
            type: "io.cattle.management.v3.RoleTemplate"
        patchRoleTemplateStatus:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/roletemplates/{name}/status
          description: Partially update status of the specified RoleTemplate
          headerParams:
            - name: Authorization
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: name of the RoleTemplate
              type: string
          queryParams:
            - name: dryRun
              description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
              type: string
            - name: fieldManager
              description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
              type: string
            - name: fieldValidation
              description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
              type: string
            - name: force
              description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests."
              type: boolean
            - name: pretty
              description: "If 'true', then the output is pretty printed. Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (curl and wget)."
              type: string
          requestBody:
            description: Patch object
            type: "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        userPermissions: 
          kind: http
          source: rancher-docs
          method: GET
          path: /how-to-guides/new-user-guides/authentication-permissions-and-global-configuration/manage-role-based-access-control-rbac/cluster-and-project-roles
          description: Cluster and project roles define user authorization inside a cluster or project
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        clusterRoleTemplateBindingUpdate:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/clusterroletemplatebindings/{name}
          description: Update a specific ClusterRoleTemplateBinding by name
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the ClusterRoleTemplateBinding
              type: string
          bodyParams:
            - name: body
              description: JSON body for the updated ClusterRoleTemplateBinding object
              type: object
        clusterRoleTemplateBindingWatch:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/clusterroletemplatebindings?watch=true
          description: Watch for changes to ClusterRoleTemplateBinding objects
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: Allows watch bookmarks
              type: boolean
            - name: fieldSelector
              description: Selector to filter fields
              type: string
            - name: labelSelector
              description: Selector to filter labels
              type: string
        clusterRoleTemplateBindingPatch:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/clusterroletemplatebindings/{name}
          description: Partially update a specific ClusterRoleTemplateBinding by name
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the ClusterRoleTemplateBinding
              type: string
          bodyParams:
            - name: body
              description: JSON body for the partial update of the ClusterRoleTemplateBinding object
              type: object
        clusterRoleTemplateBindingListAllNamespaces:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/clusterroletemplatebindings
          description: List all ClusterRoleTemplateBindings across all namespaces
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: Allows watch bookmarks
              type: boolean
            - name: continue
              description: Continue token for paginated results
              type: string
            - name: fieldSelector
              description: Selector to filter fields
              type: string
            - name: labelSelector
              description: Selector to filter labels
              type: string
            - name: limit
              description: Maximum number of results to return
              type: integer
            - name: resourceVersion
              description: Version of the resource to retrieve
              type: string
            - name: timeoutSeconds
              description: Timeout for the list operation
              type: integer
        globalRoleBindingsList:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings
          description: List objects of kind GlobalRoleBinding
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: Allows watch bookmarks
              type: boolean
            - name: continue
              description: Continue token for paginated results
              type: string
            - name: fieldSelector
              description: Selector to filter fields
              type: string
            - name: labelSelector
              description: Selector to filter labels
              type: string
            - name: limit
              description: Maximum number of results to return
              type: integer
            - name: pretty
              description: If 'true', output is pretty-printed
              type: boolean
            - name: resourceVersion
              description: Version of the resource to retrieve
              type: string
            - name: resourceVersionMatch
              description: Match resource version criteria
              type: string
            - name: sendInitialEvents
              description: Send initial events for watch
              type: boolean
            - name: timeoutSeconds
              description: Timeout for the list operation
              type: integer
            - name: watch
              description: Watch for changes to GlobalRoleBinding objects
              type: boolean
        globalRoleBindingDetails:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Get details of a specific GlobalRoleBinding by name
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the GlobalRoleBinding
              type: string
        globalRoleBindingCreate:
          kind: http
          source: rancher-api
          method: POST
          path: /apis/management.cattle.io/v3/globalrolebindings
          description: Create a new GlobalRoleBinding
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          bodyParams:
            - name: body
              description: JSON body for the GlobalRoleBinding object
              type: object
        globalRoleBindingDelete:
          kind: http
          source: rancher-api
          method: DELETE
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Delete a specific GlobalRoleBinding by name
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the GlobalRoleBinding
              type: string
        globalRoleBindingUpdate:
          kind: http
          source: rancher-api
          method: PUT
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Update a specific GlobalRoleBinding by name
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the GlobalRoleBinding
              type: string
          bodyParams:
            - name: body
              description: JSON body for the updated GlobalRoleBinding object
              type: object
        globalRoleBindingPatch:
          kind: http
          source: rancher-api
          method: PATCH
          path: /apis/management.cattle.io/v3/globalrolebindings/{name}
          description: Partially update a specific GlobalRoleBinding by name
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          pathParams:
            - name: name
              description: Name of the GlobalRoleBinding
              type: string
          bodyParams:
            - name: body
              description: JSON body for the partial update of the GlobalRoleBinding object
              type: object
        globalRoleBindingWatch:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings?watch=true
          description: Watch for changes to GlobalRoleBinding objects
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: Allows watch bookmarks
              type: boolean
            - name: fieldSelector
              description: Selector to filter fields
              type: string
            - name: labelSelector
              description: Selector to filter labels
              type: string
            - name: resourceVersion
              description: Version of the resource to retrieve
              type: string
            - name: timeoutSeconds
              description: Timeout for the watch operation
              type: integer
        globalRoleBindingListAllNamespaces:
          kind: http
          source: rancher-api
          method: GET
          path: /apis/management.cattle.io/v3/globalrolebindings
          description: List all GlobalRoleBindings across all namespaces
          headerParams:
            - name: Authorization # Example LLM input: "Bearer xyz1234"
              description: Rancher authorization token
              type: string
          queryParams:
            - name: allowWatchBookmarks
              description: Allows watch bookmarks
              type: boolean
            - name: continue
              description: Continue token for paginated results
              type: string
            - name: fieldSelector
              description: Selector to filter fields
              type: string
            - name: labelSelector
              description: Selector to filter labels
              type: string
            - name: limit
              description: Maximum number of results to return
              type: integer
            - name: pretty
              description: If 'true', output is pretty-printed
              type: boolean
            - name: resourceVersion
              description: Version of the resource to retrieve
              type: string
            - name: timeoutSeconds
              description: Timeout for the list operation
              type: integer
        
        authConfigs: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/authconfigs
          description: Authentication configuration in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        cloudCredentials: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/cloudcredentials
          description: Cloud credentials in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        clusterRegistrationTokens: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/clusterregistrationtokens
          description: cluster registration tokens in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        clusterRoleTemplateBindingsOld: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/clusterroletemplatebindings
          description: cluster role template in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        clusterTemplateRevisions: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/clustertemplaterevisions
          description: cluster template revisions in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        clusterTemplates: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/clustertemplates
          description: cluster templates in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        clusters: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/clusters
          description: clusters in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        composeConfigs: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/composeconfigs
          description: compose configurations in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        dynamicSchemas: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/dynamicschemas
          description: dyanmic schemas in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        etcdBackups: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/etcdbackups
          description: etcd backups in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        features: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/features
          description: enabled features in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        fleetWorkspaces: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/fleetworkspaces
          description: fleet workspaces in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        globalRoleBindingsOld: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/globalrolebindings
          queryParams:
          requestBody: |
            {
                "type": "collection",
                "links": {
                "self": "…/v3/globalRoleBindings"
                },
                "createTypes": {
                "globalRoleBinding": "…/v3/globalrolebindings"
                },
                "actions": { },
                "pagination": {
                "limit": 1000,
                "total": 1
                },
                "sort": {
                "order": "asc",
                "reverse": "…/v3/globalRoleBindings?order=desc&userId={{.userId}}",
                "links": {
                "uuid": "…/v3/globalRoleBindings?sort=uuid&userId={{.userId}}"
                }
                },
                "filters": {
                "created": null,
                "creatorId": null,
                "globalRoleId": null,
                "groupPrincipalId": null,
                "name": null,
                "removed": null,
                "userId": [
                {
                "modifier": "eq",
                "value": "{{.userId}}"
                }
                ],
                "userPrincipalId": null,
                "uuid": null
                },
                "resourceType": "globalRoleBinding",
                "data": [
                {
                "annotations": {
                "cleanup.cattle.io/grbUpgradeCluster": "true",
                "lifecycle.cattle.io/create.mgmt-auth-grb-controller": "true"
                },
                "baseType": "globalRoleBinding",
                "created": "",
                "createdTS": ,
                "creatorId": null,
                "globalRoleId": "",
                "groupPrincipalId": null,
                "id": "globalrolebinding-cs4v4",
                "labels": {
                "authz.management.cattle.io/bootstrapping": "admin-user"
                },
                "links": {
                "remove": "…/v3/globalRoleBindings/globalrolebinding-cs4v4",
                "self": "…/v3/globalRoleBindings/globalrolebinding-cs4v4",
                "update": "…/v3/globalRoleBindings/globalrolebinding-cs4v4"
                },
                "name": "globalrolebinding-cs4v4",
                "status": {
                "lastUpdateTime": "",
                "localConditions": [ 4 items
                {
                "lastTransitionTime": "",
                "message": "",
                "reason": "SubjectExists",
                "status": "True",
                "type": "SubjectReconciled"
                },
                {
                "lastTransitionTime": "",
                "message": "",
                "reason": "ClusterPermissionsReconciled",
                "status": "True",
                "type": "ClusterPermissionsReconciled"
                },
                {
                "lastTransitionTime": "",
                "message": "",
                "reason": "GlobalRoleBindingReconciled",
                "status": "True",
                "type": "GlobalRoleBindingReconciled"
                },
                {
                "lastTransitionTime": "",
                "message": "",
                "reason": "NamespacedRoleBindingReconciled",
                "status": "True",
                "type": "NamespacedRoleBindingReconciled"
                }
                ],
                "observedGenerationLocal": 1,
                "observedGenerationRemote": 2,
                "remoteConditions": [
                {
                "lastTransitionTime": "",
                "message": "",
                "reason": "ClusterAdminRoleExists",
                "status": "True",
                "type": "ClusterAdminRoleExists"
                }
                ],
                "summary": "Completed",
                "summaryLocal": "Completed",
                "summaryRemote": "Completed",
                "type": "/v3/schemas/globalRoleBindingStatus"
                },
                "type": "globalRoleBinding",
                "userId": "{{.userId}}",
                "userPrincipalId": "local://{{.userId}}",
                "uuid": ""
                }
                ]
                }
          bodyParams:
            - name: userid
              description: userid of the user
              type: string
          description: global role bindings in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        globalRolesOld: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/globalroles
          requestBody: |
                {
                "username": {{.username}}
                }
          bodyParams:
            - name: username
              description: name of the user
              type: string
          description: global roles in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        groupMembers: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/groupmembers
          requestBody: |
                {
                "username": {{.username}}
                }
          bodyParams:
            - name: username
              description: name of the user
              type: string
          description: group members in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        groups: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/groups
          requestBody: |
                {
                "username": {{.username}}
                }
          bodyParams:
            - name: username
              description: name of the user
              type: string
          description: groups in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        kontainerDrivers: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/kontainerdrivers
          description: containers drivers in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        ldapConfigs: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/ldapconfigs
          description: ldap configurations in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        managementSecrets: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/managementsecrets
          description: management secrets in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        nodeDrivers: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/nodedrivers
          description: node drivers in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        nodePools: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/nodepools
          description: node pools in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        nodeTemplates: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/nodetemplates
          description: node templates in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        nodes: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/nodes
          description: nodes in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        podSecurityAdmissionConfigurationTemplates: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/podsecurityadmissionconfigurationtemplates
          description: pod security admission configuration templates in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        preferences: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/preferences
          description: preferences in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        principals: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/principals
          description: principals in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        projectNetworkPolicies: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/projectnetworkpolicies
          description: project network polices in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        projectRoleTemplateBindingsOld: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/projectroletemplatebindings
          description: project role template bindings in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        projectsOld: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/projects
          description: projects in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        rancherUserNotifications: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/rancherusernotifications
          description: Rancher user notifications
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        rkeAddons: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/rkeaddons
          description: RKE2 addons in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        rkeK8sServiceOptions: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/rkek8sserviceoptions
          description: RKE2 kubernetes service options in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        rkeK8sSystemImages: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/rkek8ssystemimages
          description: RKE2 system images in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        roleTemplatesOld: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/roletemplates
          description: role templates in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        root: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3
          description: root api in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        samlTokens: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/samltokens
          description: samltokens in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        self: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3
          description: self api in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        settings: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/settings
          description: settings in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        subscribe: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/subscribe
          description: subscribe api in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        tokens: 
          kind: http
          source: rancher-api
          method: GET
          path: /v3/tokens
          description: tokens in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        users:
          kind: http
          source: rancher-api
          method: GET
          path: /v3/users
          description: find all users in Rancher
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
        userById:
          kind: http
          source: rancher-api
          method: GET
          path: /v3/users
          queryParams:
          requestBody: |
                {
                      "actions": {
                      "refreshauthprovideraccess": "…/v3/users/{{.userId}}?action=refreshauthprovideraccess",
                      "setpassword": "…/v3/users/{{.userId}}?action=setpassword"
                      },
                      "annotations": {
                      },
                      "links": {
                      "clusterRoleTemplateBindings": "…/v3/clusterRoleTemplateBindings?userId={{.userId}}",
                      "globalRoleBindings": "…/v3/globalRoleBindings?userId={{.userId}}",
                      "projectRoleTemplateBindings": "…/v3/projectRoleTemplateBindings?userId={{.userId}}",
                      "remove": "…/v3/users/{{.userId}}",
                      "self": "…/v3/users/{{.userId}}",
                      "tokens": "…/v3/tokens?userId={{.userId}}",
                      "update": "…/v3/users/{{.userId}}"
                      },
                      "me": true,
                      "mustChangePassword": false,
                      "name": "",
                      "principalIds": [
                      "local://{{.userId}}"
                      ],
                      "state": "",
                      "transitioning": "no",
                      "transitioningMessage": "",
                      "type": "user",
                      "username": "",
                      "uuid": ""
                }
          bodyParams:
            - name: userid
              description: name of the user
              type: string
          headerParams:
          - name: Authorization # Example LLM input: "Bearer xyz1234"
            description: Rancher authorization token
            type: string
          description: find a user in Rancher by userId

    toolsets:
      my-toolset:
        - authConfigs
        - cloudCredentials
        - clusterRegistrationTokens
        - clusterRoleTemplateBindingsOld
        - clusterTemplateRevisions
        - clusterTemplates
        - clusters
        - composeConfigs
        - dynamicSchemas
        - etcdBackups
        - features
        - fleetWorkspaces
        - globalRoleOld
        - globalRoleBindingsOld
        - groupMembers
        - groups
        - kontainerDrivers
        - ldapConfigs
        - managementSecrets
        - nodeDrivers
        - nodePools
        - nodeTemplates
        - nodes
        - podSecurityAdmissionConfigurationTemplates
        - preferences
        - principals
        - projectNetworkPolicies
        - projectRoleTemplateBindingsOld
        - projectsOld
        - rancherUserNotifications
        - rkeAddons
        - rkeK8sServiceOptions
        - rkeK8sSystemImages
        - roleTemplates
        - root
        - samlTokens
        - self
        - settings
        - subscribe
        - tokens
        - users
        - userById
        - userPermissions
        - clusterRoleTemplateBindings
        - clusterRoleTemplateBindingDetails
        - clusterRoleTemplateBindingUpdate
        - clusterRoleTemplateBindingWatch
        - clusterRoleTemplateBindingPatch
        - clusterRoleTemplateBindingListAllNamespaces
        - globalRoleBindings
        - globalRoleBindingsList
        - globalRoleBindingDetails
        - globalRoleBindingCreate
        - globalRoleBindingDelete
        - globalRoleBindingUpdate
        - globalRoleBindingPatch
        - globalRoleBindingWatch
        - globalRoleBindingListAllNamespaces
        - createGlobalRoleBinding
        - deleteCollectionGlobalRoleBinding
        - globalRoleBindingByName
        - replaceGlobalRoleBinding
        - deleteGlobalRoleBinding
        - patchGlobalRoleBinding
        - globalRoleBindingStatus
        - replaceGlobalRoleBindingStatus
        - patchGlobalRoleBindingStatus
        - globalRoles
        - createGlobalRole
        - deleteCollectionGlobalRole
        - globalRoleDetails
        - replaceGlobalRole
        - deleteGlobalRole
        - patchGlobalRole
        - globalRoleStatus
        - replaceGlobalRoleStatus
        - patchGlobalRoleStatus
        - namespacedClusterRoleTemplateBindings
        - createNamespacedClusterRoleTemplateBinding
        - deleteCollectionNamespacedClusterRoleTemplateBinding
        - namespacedClusterRoleTemplateBindingDetails
        - replaceNamespacedClusterRoleTemplateBinding
        - deleteNamespacedClusterRoleTemplateBinding
        - patchNamespacedClusterRoleTemplateBinding
        - namespacedClusterRoleTemplateBindingStatus
        - replaceNamespacedClusterRoleTemplateBindingStatus
        - patchNamespacedClusterRoleTemplateBindingStatus
        - namespacedProjectRoleTemplateBindings
        - createNamespacedProjectRoleTemplateBinding
        - deleteCollectionNamespacedProjectRoleTemplateBinding
        - namespacedProjectRoleTemplateBindingDetails
        - replaceNamespacedProjectRoleTemplateBinding
        - deleteNamespacedProjectRoleTemplateBinding
        - patchNamespacedProjectRoleTemplateBinding
        - namespacedProjectRoleTemplateBindingStatus
        - replaceNamespacedProjectRoleTemplateBindingStatus
        - patchNamespacedProjectRoleTemplateBindingStatus
        - namespacedProjects
        - createNamespacedProject
        - deleteCollectionNamespacedProject
        - namespacedProjectDetails
        - replaceNamespacedProject
        - deleteNamespacedProject
        - patchNamespacedProject
        - projectRoleTemplateBindings
        - projects
        - roleTemplatesOld
        - createRoleTemplate
        - deleteCollectionRoleTemplate
        - roleTemplateDetails
        - replaceRoleTemplate
        - deleteRoleTemplate
        - patchRoleTemplate
        - roleTemplateStatus
        - replaceRoleTemplateStatus
        - patchRoleTemplateStatus
        - userPermissions
        - authConfigs
        - cloudCredentials
        - clusterRegistrationTokens
        - clusterRoleTemplateBindingsOld
        - clusterTemplateRevisions
        - clusterTemplates
        - clusters
        - composeConfigs
        - dynamicSchemas
        - etcdBackups
        - features
        - fleetWorkspaces